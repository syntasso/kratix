#!/usr/bin/env bash

set -euo pipefail

ROOT=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )/.." &> /dev/null && pwd )

GIT_REPO=false
LABELS=""
NAME=""
DESTINATION_CONTEXT=""
PLATFORM_CONTEXT="kind-platform"
PLATFORM_CLUSTER_NAME=""
STATE_STORE="default"
STRICT_MATCH_LABELS=false
GITOPS_PATH=""

usage() {
    echo -e "Usage: register-destination [--help] [--git] [--with-label foo=bar] [--context k8s-context] [--name some-name] [--platform-context 'kind-platform'] [--path platform-cluster] [--strict-match-labels]"
    echo -e "\t--context='', -c,\t The Kubernetes context where to install FluxCD onto"
    echo -e "\t--git, -g\t Use Gitea as local repository in place of default local MinIO"
    echo -e "\t--help, -h\t Prints this message"
    echo -e "\t--name, -n\t Name of the destination to register"
    echo -e "\t--path, -t\t Path within the state store; defaults to platform-cluster"
    echo -e "\t--platform-context='', -p,\t The Kubernetes context of the Platform destination"
    echo -e "\t--state-store,-s\t Name of the state store to use"
    echo -e "\t--with-label foo=bar, -l\t Adds a label to the destination during registration"
    echo -e "\t--strict-match-labels\t If set, the destination will only be matched if all labels are present"
    exit "${1:-0}"
}

load_options() {
    for arg in "$@"; do
      shift
      case "$arg" in
        '--context')             set -- "$@" '-c'   ;;
        '--git')                 set -- "$@" '-g'   ;;
        '--help')                set -- "$@" '-h'   ;;
        '--name')                set -- "$@" '-n'   ;;
        '--platform-context')    set -- "$@" '-p'   ;;
        '--state-store')         set -- "$@" '-s'   ;;
        '--with-label')          set -- "$@" '-l'   ;;
        '--strict-match-labels') set -- "$@" '-m'   ;;
        '--path')                set -- "$@" '-t'   ;;
        *)                       set -- "$@" "$arg" ;;
      esac
    done

    OPTIND=1
    while getopts "p:hgn:c:l:s:t:m" opt
    do
      case "$opt" in
        'c') DESTINATION_CONTEXT="$OPTARG";;
        'g') GIT_REPO=true;;
        'h') usage ;;
        'l') LABELS="$OPTARG";;
        'n') NAME="$OPTARG";;
        'p') PLATFORM_CONTEXT="$OPTARG";;
        's') STATE_STORE="$OPTARG";;
        't') GITOPS_PATH="$OPTARG";;
        'm') STRICT_MATCH_LABELS=true;;
        *) usage 1 ;;
      esac
    done
    shift $(expr $OPTIND - 1)

    if [ -z "$NAME" ]; then
      echo "Name is required"
      usage 1
    fi
    if [ -z "$DESTINATION_CONTEXT" ]; then
      echo "Context is required"
      usage 1
    fi

    if [ -z "$GITOPS_PATH" ]; then
      GITOPS_PATH="$NAME"
    fi

    if [[ "$PLATFORM_CONTEXT" =~ ^kind-(.*)$ ]]; then
      PLATFORM_CLUSTER_NAME="${BASH_REMATCH[1]}"
    else
      echo "Error: Platform context must start with 'kind-'"
      usage 1
    fi
}

prepare_destination() {
  local context=""
  local flags=""
  local state_store_type="BucketStateStore"
  if ${GIT_REPO}; then
    flags="--git"
    state_store_type="GitStateStore"
  fi
  $ROOT/scripts/install-gitops --context $DESTINATION_CONTEXT --path "$GITOPS_PATH" --platform-cluster-name ${PLATFORM_CLUSTER_NAME} "$flags"

  local yqOpts=".metadata.name = \"$NAME\" | .metadata.labels = {} | .spec.path = \"$NAME\" | .spec.stateStoreRef.name = \"$STATE_STORE\" | .spec.stateStoreRef.kind = \"$state_store_type\" | .spec.strictMatchLabels = $STRICT_MATCH_LABELS"
  yq "${yqOpts}" $ROOT/config/samples/platform_v1alpha1_worker.yaml |
    kubectl --context $PLATFORM_CONTEXT apply -f -

  if [ -n "$LABELS" ]; then
    kubectl --context $PLATFORM_CONTEXT label destination $NAME ${LABELS}
  fi
}

main() {
    load_options $@
    prepare_destination
}

if [ "$0" = "${BASH_SOURCE[0]}" ]; then
    main $@
fi
