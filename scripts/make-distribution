#!/usr/bin/env bash

ROOT=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )/.." &> /dev/null && pwd )
set -euo pipefail

cd "$ROOT"
source "$ROOT/scripts/utils.sh"

export VERSION="${VERSION:-$(commit_sha)}"

function fetch_digest() {
  local image="$1"
  local digest

  digest=$(skopeo --override-os linux inspect "docker://docker.io/${image}:latest" | jq -r .Digest)
  if [ -z "$digest" ]; then
    echo "Error: digest for image '$image' is empty"
    exit 1
  fi

  echo "syntasso.docker.scarf.sh/${image}@${digest}"
}

function generate_all_manifests() {
  mkdir -p distribution/single-cluster

  cat distribution/kratix.yaml <(echo "---") \
      hack/destination/gitops-tk-install.yaml <(echo "---") \
      hack/platform/minio-install.yaml > distribution/single-cluster/install-all-in-one.yaml

  cat config/samples/platform_v1alpha1_worker.yaml <(echo "---") \
      config/samples/platform_v1alpha1_bucketstatestore.yaml <(echo "---") \
      hack/destination/gitops-tk-resources-single-cluster.yaml > distribution/single-cluster/config-all-in-one.yaml
}

export IMG_TAG=$(fetch_digest "syntasso/kratix-platform-quickstart")
export PIPELINE_ADAPTER_IMG=$(fetch_digest "syntasso/kratix-platform-pipeline-adapter-quickstart")
# Generate kratix.yaml with the quickstat images, so we can generate the install-all-in-one.yaml with the quickstart images
make distribution
generate_all_manifests

export IMG_TAG=$(fetch_digest "syntasso/kratix-platform")
export PIPELINE_ADAPTER_IMG=$(fetch_digest "syntasso/kratix-platform-pipeline-adapter")
# Regenerate kratix.yaml with the normal images
make distribution
