// Code generated by counterfeiter. DO NOT EDIT.
package controllerfakes

import (
	"sync"

	"github.com/syntasso/kratix/api/v1alpha1"
	"github.com/syntasso/kratix/internal/controller"
)

type FakeWorkScheduler struct {
	ReconcileWorkStub        func(*v1alpha1.Work) ([]string, error)
	reconcileWorkMutex       sync.RWMutex
	reconcileWorkArgsForCall []struct {
		arg1 *v1alpha1.Work
	}
	reconcileWorkReturns struct {
		result1 []string
		result2 error
	}
	reconcileWorkReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWorkScheduler) ReconcileWork(arg1 *v1alpha1.Work) ([]string, error) {
	fake.reconcileWorkMutex.Lock()
	ret, specificReturn := fake.reconcileWorkReturnsOnCall[len(fake.reconcileWorkArgsForCall)]
	fake.reconcileWorkArgsForCall = append(fake.reconcileWorkArgsForCall, struct {
		arg1 *v1alpha1.Work
	}{arg1})
	stub := fake.ReconcileWorkStub
	fakeReturns := fake.reconcileWorkReturns
	fake.recordInvocation("ReconcileWork", []interface{}{arg1})
	fake.reconcileWorkMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWorkScheduler) ReconcileWorkCallCount() int {
	fake.reconcileWorkMutex.RLock()
	defer fake.reconcileWorkMutex.RUnlock()
	return len(fake.reconcileWorkArgsForCall)
}

func (fake *FakeWorkScheduler) ReconcileWorkCalls(stub func(*v1alpha1.Work) ([]string, error)) {
	fake.reconcileWorkMutex.Lock()
	defer fake.reconcileWorkMutex.Unlock()
	fake.ReconcileWorkStub = stub
}

func (fake *FakeWorkScheduler) ReconcileWorkArgsForCall(i int) *v1alpha1.Work {
	fake.reconcileWorkMutex.RLock()
	defer fake.reconcileWorkMutex.RUnlock()
	argsForCall := fake.reconcileWorkArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeWorkScheduler) ReconcileWorkReturns(result1 []string, result2 error) {
	fake.reconcileWorkMutex.Lock()
	defer fake.reconcileWorkMutex.Unlock()
	fake.ReconcileWorkStub = nil
	fake.reconcileWorkReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkScheduler) ReconcileWorkReturnsOnCall(i int, result1 []string, result2 error) {
	fake.reconcileWorkMutex.Lock()
	defer fake.reconcileWorkMutex.Unlock()
	fake.ReconcileWorkStub = nil
	if fake.reconcileWorkReturnsOnCall == nil {
		fake.reconcileWorkReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.reconcileWorkReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkScheduler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.reconcileWorkMutex.RLock()
	defer fake.reconcileWorkMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWorkScheduler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ controller.WorkScheduler = new(FakeWorkScheduler)
